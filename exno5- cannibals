from collections import deque
def is_valid_state(state):
    missionaries_left, cannibals_left, boat_position = state
    missionaries_right = 3 - missionaries_left
    cannibals_right = 3 - cannibals_left
    if missionaries_left > 0 and cannibals_left > missionaries_left:
        return False
    if missionaries_right > 0 and cannibals_right > missionaries_right:
        return False
    return True
def generate_next_states(state):
    next_states = []
    missionaries_left, cannibals_left, boat_position = state
    new_boat_position = 1 - boat_position
    for i in range(3):
        for j in range(3):
            if 1 <= i + j <= 2:
                new_missionaries_left = missionaries_left - i if boat_position == 0 else missionaries_left + i
                new_cannibals_left = cannibals_left - j if boat_position == 0 else cannibals_left + j
                new_state = (new_missionaries_left, new_cannibals_left, new_boat_position)
                if is_valid_state(new_state):
                    next_states.append(new_state)
    return next_states
def solve_missionaries_cannibals():
    start_state = (3, 3, 0)
    goal_state = (0, 0, 1)
    visited = set()
    queue = deque([(start_state, [])])

    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path + [current_state]
        if current_state not in visited:
            visited.add(current_state)
            for next_state in generate_next_states(current_state):
                queue.append((next_state, path + [current_state]))
    return None
def format_solution(solution):
    formatted_solution = []
    for i in range(len(solution)):
        missionaries_left, cannibals_left, boat_position = solution[i]
        formatted_solution.append(f"Step {i + 1}: "
                                   f"{'-' * missionaries_left} {'M' * (3 - missionaries_left)} | "
                                   f"{'C' * cannibals_left} {'-' * (3 - cannibals_left)}  "
                                   f"{'(boat) ' if boat_position == 0 else ''}")
    return formatted_solution
def main():
    solution = solve_missionaries_cannibals()
    if solution:
        print("Solution found:")
        for step in format_solution(solution):
            print(step)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    main()
